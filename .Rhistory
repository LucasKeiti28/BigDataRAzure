x
ls()
# Lista todas as variaveis
ls()
num1 <- 7
num1
class(num1)
mode(num1)
typeof(num1)
num2  = 16.82
y = as.integer(num2)
class(y)
mode(y)
typeof(y)
char1 = 'A'
char2 = 'Teste'
char3 = c('1', '2', '3')
vetor1 = c(1:20)
vetor1
mode(vetor1)
length(vetor1)
typeof(vetor1)
class(vetor1)
vetor1[0]
vetor1[1]
# matriz: possui 2 dimensoes, com apentas 1 tipo de dado
matriz1 <- matrix(1:30, nrow=3)
matriz1
mode(matriz1)
length(matriz1)
typeof(matriz1)
class(matriz1)
# array: possui 2 ou mais dimensoes, com apenas 1 tipo de dado
array1 <- array(1:5, dim = c(3,3,3))
array1
mode(array1)
length(array1)
typeof(array1)
class(array1)
# Trabalhando com diferentes tipos de dados
# Dataframes: matriz com diferentes tipos de dados
View(iris)
mode(iris)
length(iris)
typeof(iris)
class(iris)
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sao possiveis e bem comum
lista1 <- list(a = matriz1, b = vetor1)
lista1
mode(lista1)
length(lista1)
typeof(lista1)
class(lista1)
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sao possiveis e bem comum
lista1 <- list(a = array1, b = vetor1)
lista1
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sao possiveis e bem comum
lista1 <- list(a = matriz1, b = vetor1)
lista1
mode(lista1)
length(lista1)
typeof(lista1)
class(lista1)
func1 <- function(x) {
var1 <- x*x
return (var1)
}
func1(5)
class(func1)
# Removendo objetos
objects()
rm(array1, func1)
objects()
getwd()
vetor_caracter
# Vetor de strings
vetor_caracter = c("Data", 'Science', 'Academy')
vetor_caracter
# Vetor de floas
vetor_float = c(1.5, 2.5, 3.5)
vetor_float
# Vetor de valores logicos
vetor_logico = c(TRUE, FALSE, FALSE)
vetor_logico
# Utilizando seq()
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
# Utilizando rep()
vetor2 = rep(1:5)
vetor2
is.vector(vetor2)
# Indexacao de Vetores
a <- (1,2,3,4,5)
a
# Indexacao de Vetores
a <- c(1,2,3,4,5)
a
a[1]
a[6]
# Combinando Vetores
v1 = c(1,2,3)
v2 = c('a', 'b', 'c')
c(v1,v2)
# Operacoes com vetores
x = c(1,2,3,4)
y = c(10,20,30,40)
x + y
x * y
x * 4
# Operacoes com vetores de diferentes tamanhos
alfa = c(10, 20, 30)
beta = c(1,2,3,4,5,6,7,8,9,10)
alfa + beta
# Vetor nomeado
v = c("Nelson", "Mandela")
v
names(v) = c("Nome", "Sobrenome")
v
v("Nome")
v["Nome"]
matrix(c(1,2,3,4,5,6), nr = 2)
matrix(c(1,2,3,4,5,6), nr = 3)
matrix(c(1,2,3,4,5,6), nr = 6)
matrix(c(1,2,3,4,5,6), nr = 5)
# Numero de Colunas
matrix(c(1,2,3,4,5,6), nc = 2)
#help
?matrix
# Criando matriz a patir de um vetor e preenchendo a partir das linhas
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byro2=1)
# Criando matriz a patir de um vetor e preenchendo a partir das linhas
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow=T)
matrix(data = meus_dados, nrow = 5, ncol=2)
# Fatiando Matriz
m1 = matrix(c(1,2,3,4), nr = 2)
m1
m1[1,1]
m1[1,2]
m1[2,2]
m1[,2]
# Crioando Matriz
m2 = matrix(c(1:10), nr=5)
m2
# Matriz Diagonal
matriz = 1:3
diag(matriz)
# Extraindo o vetor de uma matriz diagonal
vetor = diag(matriz)
vetor
diag(vetor)
# Transposta da Matriz
w <- matrix(c(1:4), nr =2, ncol=2)
w
t(w)
u <- t(w)
u
# obtendo a matriz inversa
solve(w)
a <- solve(w)
a
w * a
# Multiplicando matriz com vetor
x = c(1,4)
x
y<-matrix(c(5:8), nr=2)
y
x*y
# Multiplicando matriz com vetor
x = c(1:4)
x
y<-matrix(c(5:8), nr=2)
y
x*y
# Nomeando linhas e colunas de uma matriz
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Jupiter'), nr=2)
mat3
dimnames(mat3) = (list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
mat3
# Combinando matrizes
mat4 >- matrix(c(1:4), nr =2)
mat4
# Combinando matrizes
mat4 <- matrix(c(1:4), nr =2)
mat4
mat5 <- matrix(c(1:4), nr =2)
mat5
cbind(mat4, mat5)
rbind(mat4, mat5)
# Desconstruindo uma matriz
c(mat4)
lista = list(matrix(c("A", "A", "A", "A"), nr=2), "B", "C")
lista
# Lista de Numeros inteiros
lista_numerido(list(1,2,3))
# Lista de Numeros inteiros
lista_numerico = (list(1,2,3))
lista_numerico
# Listas compostas
lista1 <- list(1:10, c('Zico', 'Ronaldo', 'Pele'), rnorm(10))
lista1
?rnom
?rnorm
#String
texto<-"Isso e uma string"
texto
# Conectando Strings
name = "Nelson"; sobrenome="Mandela"
paste(name, sobrenome)
cat(name, sobrenome)
# Formatando a saida
sprintf('A %s e nota $d', "DSA", 10)
# Formatando a saida
sprintf('A %s e nota %d', "DSA", 10)
getwd(
)
getwd()
# Exercício 1 - Crie um vetor com 30 números inteiros
vetor = c(1:30)
vetor
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matriz = matrix(c(1:16), nr=4)
matriz
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lista = list(vetor, matriz)
lista
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para uma dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
sample <- read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
sample
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
names(sample) <- c("config", "esfc", "chang")
names
sample
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
?iris
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
View(iris)
summary(iris)
iris.length()
dim(iris)
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
View(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
plot(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
plot(iris, 2)
# Exercício 6 - Imprima na tela o dataframe iris, verifique quantas dimensões existem no dataframe iris e imprima um resumo do dataset
View(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
plot(iris, Sepal.Length)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
plot(Sepal.Length)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
coluna1 = iris[Sepal.Length]
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
coluna1 = iris[q]
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
coluna1 = iris[1]
coluna1
coluna2 = iris[2]
coluna2
newIris = cbind(coluna1, coluna2)
newIris
plot(newIris)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset()
subset(iris, [1] > 7)
subset(iris, Sepal.Length > 7)
newSubSet <- subset(iris, Sepal.Length > 7)
newSubSet
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages("dplyr")
library(dplyr) # for functions
copy_to("/Users/lucaskeiti/data_science_academy/Lucas/BigDataRAzure", iris, copyIris)
?slice()
?slice
??slice
sliceIris = slice(iris, 15)
sliceIris = filter(iris, 15)
sliceIris
sliceIris = filter(iris, Sepal.Length > 6)
sliceIris
# Criando um dataframe vazio
df <- data.frame()
class(df)
df
# Criando vetores vazios
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
df <- data.frame(c(nomes, idades, itens, codigos))
df
# Criando vetores
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
nome = c("Bruno", "Tiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
# Adicionando um novo vetor a um dataframe existente
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
# Informações sobre o dataframe
str(pesq)
dim(pesq)
length(pesq)
# Obtendo um vetor de um dataframe
pesq$pais
pesq$nome
# Extraindo um único valor
pesq[1,1]
pesq[3,2]
# Número de Linhas e Colunas
nrow(pesq)
ncol(pesq)
# Primeiros elementos do dataframe
head(pesq)
head(mtcars)
# Últimos elementos do dataframe
tail(pesq)
tail(mtcars)
# Data frames built-in do R
?mtcars
mtcars
View(mtcars)
# Filtro para um subset de dados que atendem a um critério
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
# Dataframes Nomeados
names(pesq) <- c("País", "Nome", "Altura", "Código", "Olhos")
pesq?
colnames(pesq) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
pesq
# Carregando um arquivo csv
?read.csv
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
# Visualizando o dataset
View(pacientes)
head(pacientes)
summary(pacientes)
# Visualizando as variáveis
pacientes$Diabete
pacientes$status
pacientes$Status
# Histograma
hist(pacientes$Idade)
# Combinando dataframes
dataset_final <- merge(pesq, pacientes)
dataset_final
# Carregando um arquivo csv
?read.csv
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
# Visualizando o dataset
View(pacientes)
head(pacientes)
# Carregando um arquivo csv
?read.csv
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
# Visualizando o dataset
View(pacientes)
getwd()
vec1 <- c("Macho","Femea","Femea","Macho","Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
animais <- c("Zebra", "Pantera", "Rinoceronte", "Macaco", "Tigre")
fac_animais <- factor(animais)
fac_animais
class(fac_animais)
grad <- c("Mestrado", "Doutorado", "Bacharelado", "Mestrado", "Mestrado")
grad
fac_grad <- factor(grad, order=TRUE, levels=c("Bacharelado", "Mestrado", "Doutorado"))
fac_grad
summary(fac_grad)
summary(grad)
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata = factor(data)
fdata
rdata = factor(data, labels=c("I", "II", "III"))
rdata
set1 <- c("AA", "B", "BA", "CC", "CA", "AA", "BA", "CC", "CC")
set1
f.set1 <- factor(set1)
f.set1
class(f.set)
class(f.set1)
is.ordered(f.set1)
o.set1 <- factor(set1,
ordered = TRUE,
levels = c("CA", "BA", "AA", "CC", "B")
)
o.set1
is.ordered(o.set1)
df <- read.csv2("etnias.csv", sep=",")
df
df <- read.csv2("/Cap03/etnias.csv", sep=",")
df
setwd("Users/lucaskeiti/data_science_academy/Lucas/BigDataRAzure/Cap03")
getwd()
df <- read.csv2("etnias.csv", sep=",")
df
View(df)
str(df)
levels(df$Etnia)
summary(df$Etinia)
summary(df$Etnia)
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
# Convertendo uma coluna em variável categórica. Isso criará um fator não-ordenado
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
df
str(df)
df <- read.csv2("../etnias.csv", sep=",")
df <- read.csv2("../etnias.csv", sep=",")
df
df <- read.csv2("Cap03/etnias.csv", sep=",")
df
getwd()
lista1 <- list(a=(1:20), b=(35:67))
lista1
# Calculando cada elemento da lista com sapply
?sapply
# sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)
sapply(lista1, sum)
sapply(lista1, mean)
x <- matrix(c(20, 13, 65, 32, 45, 12, 76, 49, 82), nr = 3, byrow = T)
x
# apply()
?apply
# apply(X, MARGIN, FUN, ...)
apply(x, mean)
# apply(X, MARGIN, FUN, ...)
apply(x,1, mean)
apply(x, 2, mean)
apply(x,1, plot)
resultapply <- apply(x, 1, mean)
class(resultapply)
# Aplicando apply a um DataFrame
escola <- data.frame(Aluno = c('Bob', 'Tereza', 'Marta', 'Felipe', 'Zacarias', 'Elton'),
Fisica = c(91, 82, 75, 97, 62, 74),
Matematica = c(99, 100, 86, 92, 91, 87),
Quimica = c(56, 72, 49, 68, 59, 77))
escola
escola$media = NA
escola
escola$media <- apply(escola(,c(2,3,4), 1, mean))
escola$media <- apply(escola[,c(2,3,4)], 1, mean)
escola
escola
escola$media <- round(escola$media)
escola
# tapply()
?gl
#gl(n, k, length = n*k, labels = seq_len(n), ordered = FALSE)
?sample
#sample(x, size, replace = FALSE, prob = NULL)
?floor
?runif
#runif(n, min = 0, max = 1)
tabela_basquete <-
data.frame(equipe = gl(5, 5, labels = paste("Equipe", LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25, min=0, max=50)))
View(tabela_basquete)
summary(tabela_basquete)
# Calculando total de cestas por equipe
# Usando SQL
install.packages('sqldf')
library(sqldf)
sqldf("select equipe, sum(num_cestas) from tabela_basquete group by equipe")
?taplly()
?tapply()
# tapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, sum)
tapply(tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
View(tabela_basquete)
#by
?by
#by(data, INDICES, FUN, ..., simplify = TRUE)
?rnorm
dat
dat <- data.frame(species=c(rep(c(1,2,3), each=5)),
petal.length=c(rnorm(5, 4.5, 1)),
petal.width=c(rnorm(5, 2.5, 1),
rnorm(5, 2.5, 1),
rnorm(5, 4, 1)))
dat
View(dat)
by(dat, dat$species, function(x){
# calcular o comprimento médio da pétala para cada espécie
mean.pl <- mean(x$petal.length)
})
#by
?by
