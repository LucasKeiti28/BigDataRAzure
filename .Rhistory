getwd()
ls
getwd()
7 + 7
7 - 4
5 * 5
6/6
3^2
3**2
3**2
16%%3
x = 7
y = 5
x > 8
x < 8
x !== 8
x != 8
x == 8
# Operadores Logicos
# AND
(x==8) & (x==6)
# OR
(x==8) | (x==6)
# OR
(x==7) | (x==6)
# NOT
x > 8
print(!x>8)
getwd()
var1 = 100
var1
mode(var1)
help('mode')
sqrt(var1)
var1
var2 = var1
var2
mode(var2)
typeof(var2)
help('typeof')
var3 = c('primeiro', 'segundo', 'terceiro')
var3
mode(var3)
typeof(var3)
var4 = function(x) {x+3}
var4
mode(var4)
help('mode')
help('typeof')
var4 = function(x) {x+3}
var4
mode(var4)
# Mudando o modo do dado
var5 = as.character(var1)
var5
mode(var5)
# Atribuindo valores a objetos
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign('x', c(6,4,3,2))
x
x[1]
ls()
objects()
rm(x)
x
ls()
# Lista todas as variaveis
ls()
num1 <- 7
num1
class(num1)
mode(num1)
typeof(num1)
num2  = 16.82
y = as.integer(num2)
class(y)
mode(y)
typeof(y)
char1 = 'A'
char2 = 'Teste'
char3 = c('1', '2', '3')
vetor1 = c(1:20)
vetor1
mode(vetor1)
length(vetor1)
typeof(vetor1)
class(vetor1)
vetor1[0]
vetor1[1]
# matriz: possui 2 dimensoes, com apentas 1 tipo de dado
matriz1 <- matrix(1:30, nrow=3)
matriz1
mode(matriz1)
length(matriz1)
typeof(matriz1)
class(matriz1)
# array: possui 2 ou mais dimensoes, com apenas 1 tipo de dado
array1 <- array(1:5, dim = c(3,3,3))
array1
mode(array1)
length(array1)
typeof(array1)
class(array1)
# Trabalhando com diferentes tipos de dados
# Dataframes: matriz com diferentes tipos de dados
View(iris)
mode(iris)
length(iris)
typeof(iris)
class(iris)
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sao possiveis e bem comum
lista1 <- list(a = matriz1, b = vetor1)
lista1
mode(lista1)
length(lista1)
typeof(lista1)
class(lista1)
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sao possiveis e bem comum
lista1 <- list(a = array1, b = vetor1)
lista1
# Listas: colecao de diferentes objetos
# Diferentes tipos de dados sao possiveis e bem comum
lista1 <- list(a = matriz1, b = vetor1)
lista1
mode(lista1)
length(lista1)
typeof(lista1)
class(lista1)
func1 <- function(x) {
var1 <- x*x
return (var1)
}
func1(5)
class(func1)
# Removendo objetos
objects()
rm(array1, func1)
objects()
