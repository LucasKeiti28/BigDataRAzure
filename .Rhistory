dado
dado = paste(dado, '%', sep="")
dado
pie(fatia, labels = paises)
dado = paste(fatia,paises)
paises = paste(dado, '%', sep="")
dado
pie(fatia, labels = paises)
paises
paises = c("BR", "JP", "EUA")
paises
paises = paises(dado, '%', sep="")
paises
pie(fatia, labels = paises)
paises = paste(paises, '%', sep="")
paises
pie(fatia, labels = paises)
paises = paste(paises, fatia, '%', sep="")
paises
paises = c("BR", "JP", "EUA")
paises = paste(paises, fatia, '%', sep="")
paises
paises = c("BR", "JP", "EUA")
paises = paste(paises, fatia, '%')
paises
pie(fatia, labels = paises)
colors()
pie(fatia, labels = paises, col=c("steelblue", "springgreen", "sandybrown"))
pie(fatia, labels = paises, col=c("steelblue", "springgreen", "sandybrown", main="Sales Distribution"))
pie(fatia, labels = paises, col=c("steelblue", "springgreen", "sandybrown"), main="Sales Distribution")
getwd()
install.packages('ggplot2')
require(ggplot2)
data(tips)
View(tips)
data(tips, package='reshape2')
View(tips)
# Criando um graifo scatter plot
qplot(total_bill, tip, data = tips)
# Criando um graifo scatter plot
qplot(total_bill, tip, data = tips, geom = point)
# Criando um graifo scatter plot
qplot(total_bill, tip, data = tips, geom = "point")
# Criando um graifo scatter plot
?qplot
# Criando um grafico com o conceito de Geometria dos Graficos
camada1 <- geom_point(
mapping = aes(x=total_bill, y=tip, color = sex),
data = tips,
size=3
)
ggplot() + camada1
# Criando um grafico com o conceito de Geometria dos Graficos
camada1 <- geom_point(
mapping = aes(x=total_bill, y=tip),
data = tips,
size=3
)
ggplot() + camada1
# Criando um grafico com o conceito de Geometria dos Graficos
camada1 <- geom_point(
mapping = aes(x=total_bill, y=tip, color = sex),
data = tips,
)
ggplot() + camada1
size=3
size=3
# Criando um grafico com o conceito de Geometria dos Graficos
camada1 <- geom_point(
mapping = aes(x=total_bill, y=tip, color = sex),
data = tips,
size=3
)
ggplot() + camada1
?aes
?geom_point
# Construindo um modelo de regressao
modelo_base <- lm(tip~total_bill, data=tips)
modelo_fit <- data.frame(total_bill = tips$total_bill, predict(modelo_base, interval = "confidence"))
head(modelo_fit)
View(tips)
# Criando a camada 2 do grafico
camada2 <- geom_line(mapping = ases(x=total_bill, y=tip), data=modelo_fit, color=darked)
# Criando a camada 2 do grafico
camada2 <- geom_line(mapping = ases(x=total_bill, y=tip), data=modelo_fit, color="darkred")
# Criando a camada 2 do grafico
camada2 <- geom_line(mapping = aes(x=total_bill, y=tip), data=modelo_fit, color="darkred")
ggplot() + camada1 + camada2
# Criando a camada 2 do grafico
camada2 <- geom_line(mapping = aes(x=total_bill, y=fit), data=modelo_fit, color="darkred")
ggplot() + camada1 + camada2
# Camada3: Intervalo de confianca
camada3 <- geom_ribbon(mapping = aes(x=total_bill, ymin=lwr,ymax=upr), data=modelo_fit, alpha=0.3)
ggplot() + camada1 + camada2 + camada3
# Versão final otimizada
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
?geom_smooth
# Gravando o gráfico em um objeto
myplot <- ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
class(myplot)
print(myplot)
# Dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 +
rnorm(100,sd = 9), var2 = 1:100 +
rnorm(100,sd = 16))
# Plot
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
?lm
# Bar Plot
data = data.frame(grupo=c('A', 'B', 'C', 'D', 'E'),
valor = c(32,62,56,67),
num_obs: c(100,500,459,342))
# Bar Plot
data = data.frame(grupo=c('A', 'B', 'C', 'D', 'E'),
valor = c(32,62,56,67),
num_obs= c(100,500,459,342))
# Bar Plot
data = data.frame(grupo=c('A', 'B', 'C', 'D', 'E'),
valor = c(32,62,56,67, 80),
num_obs= c(100,500,459,342))
# Bar Plot
data = data.frame(grupo=c('A', 'B', 'C', 'D', 'E'),
valor = c(32,62,56,67,80),
num_obs= c(100,500,459,342,310))
ggplot(data, aes(ymin=0)) + geom_react(aes(xmin = left, xmax=right, ymax = valor, colour = grupo, fill = grupo)) +   xlab("Número de Observações") + ylab("Valor")
ggplot(data, aes(ymin=0)) + geom_rect(aes(xmin = left, xmax=right, ymax = valor, colour = grupo, fill = grupo)) +   xlab("Número de Observações") + ylab("Valor")
# Gerando a massa de dados
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
ggplot(data, aes(ymin=0)) + geom_rect(aes(xmin = left, xmax=right, ymax = valor, colour = grupo, fill = grupo)) +   xlab("Número de Observações") + ylab("Valor")
# usando mtcards
head(mtcars)
View(mtcars)
ggplot(data=mtcars)
ggplot(data=mtcars, aes(x=disp, y=mpg))
ggplot(data=mtcars, aes(x=disp, y=mpg)) + geom_point()
ggplot(data=mtcars, aes(x=disp, y=mpg), colour = as.factor(am)) + geom_point()
ggplot(data=mtcars, aes(x=disp, y=mpg, colour = as.factor(am))) + geom_point()
?aes
ggplot(data=mtcars, aes(x=disp, y=mpg, colour = cyl)) + geom_point()
# Variavel continua
ggplot(data=mtcars, aes(x=disp, y=mpg, colour = wt)) + geom_point()
# Variavel continua
ggplot(data=mtcars, aes(x=disp, y=wt, colour = cyl)) + geom_point()
# Também podemos mapear o tamanho dos pontos à uma variável de interesse:
# A legenda é inserida no gráfico automaticamente
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
ggplot(data=mtcars, aes(x=disp, y=mpg, colour = as.factor(am))) + geom_boxplot()
ggplot(data=mtcars, aes(x=disp, y=mpg)) + geom_boxplot()
# Histogramas
ggplot(mtcars, aes(x = mpg), binwidth = 30) + geom_histogram()
# Gráfico de Barras
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
# Facets
ggplot(mtcars, aes(x=mpg, y=disp, colour=as.factor(cyl))) + geom_point() + facet_grid(am~.)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(.~am)
# Plots diferentes juntos (diferente de Facet)
install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
data(diamonds)
View(diamonds)
ggplot(diamonds, aes(x=depth, y=price)) + geom_point()
ggplot(diamonds, aes(x=depth, y=price, colour=clarity)) + geom_point()
ggplot(diamonds, aes(x=depth, y=price, colour=cut)) + geom_point()
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
# Combina os 2 plots na mesma área
grid.arrange(plot1, plot2, ncol = 1)
# Facets com reshape
install.packages("reshape2")
install.packages("plotly")
library(reshape2)
library(plotly)
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
View(mtcars)
View(mpg)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
require(lattice)
View(iris)
xyplot(data=iris, groups=Species, Sepal.length~Petal.length)
xyplot(data=iris, groups=Species, Sepal.length~Petal.length)
xyplot(data = iris, groups = Species, Sepal.Length ~ Petal.Length)
xyplot(data=iris, groups=Species, Sepal.Length~Petal.Length)
?Titanic
View(Titanic)
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2),
scales = list(x = "free"))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
histogram(~Sepal.Length | Species, xlab = "",
data = iris, layout=c(3,1), type = "density",
main = "Histograma Lattice", sub = "Iris Dataset, Sepal Length")
# Distribuição dos dados
qqmath(~ Sepal.Length | Species, data = iris, distribution = qunif)
install.packages(c('maps', 'mapdata'))
require(maps)
require(mapdata)
# Buscando as coordenadas dos paises
mapa <- map_data("world")
View(mapa)
# Buscando as coordenadas dos paises
mapa <- map_data("world")
# Buscando as coordenadas dos paises
?map_data
require(ggplot2)
mapa <- map_data("world")
View(mapa)
summary(mapa)
# Gerando o mapa
ggplot() + geom_polygon(data=maps, aes(x=long, y=lat, group=group))
# Gerando o mapa
ggplot() + geom_polygon(data=mapa, aes(x=long, y=lat, group=group))
# Gerando o mapa
ggplot() + geom_polygon(data=mapa, aes(x=long, y=lat, group=group)) + coord_fixed(1.3)
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = "seagreen1", color = "blue") +
coord_fixed(1.3)
gg1
# Marcando alguns pontos no mapa
# Podemos usar um shapefile
labs <- data.frame(
long = c(69.24140, -2.8456051),
lat = c(-78.38995, 22.44512),
names = c("Ponto1", "Ponto2"),
stringsAsFactors = FALSE
)
# Pontos no mapa
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 2)
install.packages('googleVis')
require(googleVis)
df = data.frame(País = c("BR", "CH", "AR"),
Exportações = c(10,13,14),
Importações = c(23,12,32))
line <- gvisLineChart(df)
plot(line)
plot(gvisColumnChart(df))
datasets()
dataset()
?CityPopularity
?iris
plot(gvisPieChart(CitiPopularity))
plot(gvisPieChart(CityPopularity))
plot(gvisLineChart(iris))
head(iris)
plot(gvisLineChart(iris$Species))
Scatter <- gvisScatterChart(women,
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="Women", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
plot(Scatter)
Intensity <- gvisIntensityMap(df)
plot(Intensity)
# Geo Chart
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
# Google Maps
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(AndrewMap)
# Dados em Gráfico. Nível de analfabetismo nos EUA
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
plot(GeoStates)
View(states)
View(state)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=1200, height=800))
plot(GeoStates)
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
getwd()
print dframe
# Exercicio 1 - Crie uma função que receba os dois vetores abaixo como parâmetro,
# converta-os em um dataframe e imprima no console
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
function(vec1, vec2){
dframe <- data.frame(vec1,vec2)
print(dframe)
}
dframe
return print(dframe)
myfunc(vec1,vec2)
myfunc <- function(vec1, vec2){
dframe <- data.frame(vec1,vec2)
print(dframe)
}
myfunc(vec1,vec2)
# Exercicio 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com
# números inteiros e calcule a média de cada linha
?matrix
matriz <- matrix(data = c(1:16), nrow=4, ncol=4)
matriz
?colMeans
colMeans(matriz)
rowMeans(matriz)
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
View(escola)
escola$media=NA
media <- escola$Media
escola$media=NA
media <- escola$media
cbind(escola,media )
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
View(escola)
escola$media=NA
media <- escola$media
cbind(escola,media )
cbind(escola )
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
cbind(escola, escola$media = NA)
cbind(escola, escola$media)
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
View(escola)
escola$media=NA
media <- escola$media
cbind(escola)
rowMeans(escola)
rowMeans(escola$Matematica)
subjects <- (escola$Matematica, escola$Geografia, escola$Quimica)
subjects <- (escola$Matematica : escola$Geografia : escola$Quimica)
subjects
subjects <- matrix(data=c(escola$Matematica, escola$Geografia, escola$Quimica), nrows=6, ncol=3)
subjects <- matrix(data=c(escola$Matematica, escola$Geografia, escola$Quimica), nr=6, nc=3)
subjects
rowMeans(subjects)
medias <- rowMeans(subjects)
cbind(escola,medias )
# Exercicio 3 - Considere o dataframe abaixo.
# Calcule a média por disciplina e depois calcule a média de apenas uma disciplina
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matematica = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Quimica = c(76, 56, 89, 90, 100, 87))
cbind(escola,medias )
266/3
round(medias,0)
cbind(escola,medias)
cbind(escola,round(medias,0))
medias <- colMeans(subjects)
medias
rbind(escola,round(colMeans(subjects)))
grades <- colMeans(subjects)
grades
rbind(escola,round(grades,0))
rbind(escola,Media=round(grades,0))
media_sum <- round(grades,0)
rbind(escola,media_sum)
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
vector1 = c(1,2,3)
sum(vector1)
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
list1 = list(1,2,3)
sum(list1)
>lapply
?lapply
list1
lapply(list1, sum)
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
list1 = list(1,2,3)
# Exercicio 4 - Cria uma lista com 3 elementos, todos numéricos
# e calcule a soma de todos os elementos da lista
list1 = list(1,2,3)
list1 = list(1,2,3)
lapply(list1, sum)
list1 = list(a=(1,2,3), b=(4,5,6)
list1 = list(a=(1,2,3), b=(4,5,6))
list1 = list(a=(1:3), b=(4:6))
list1
lapply(list1, sum)
list1 = list(a=(1:3))
list1
lapply(list1, sum)
# Exercicio 5 - Transforme a lista anterior um vetor
unlist(list1)
# Exercicio 5 - Transforme a lista anterior um vetor
unlist(list1, use.names = FALSE)
# Exercicio 5 - Transforme a lista anterior um vetor
?unlist
# Exercicio 6 - Considere a string abaixo. Substitua a palavra "textos" por "frases"
str <- c("Expressoes", "regulares", "em linguagem R",
"permitem a busca de padroes", "e exploracao de textos",
"podemos buscar padroes em digitos",
"como por exemplo",
"10992451280")
gsub("textos", "frases", str)
?gsub()
# Exercicio 7 - Usando o dataset mtcars, crie um gráfico com ggplot do tipo
# scatter plot. Use as colunas disp e mpg nos eixos x e y respectivamente
View(mtcars)
ggplot(mtcars, aes(x=disp, y=mpg)) + scatter.smooth()
ggplot(mtcars, aes(x=disp, y=mpg)) + scatter()
?ggplot
?qplot
qplot(mtcars, aes(x=disp, y=mpg))
?qplot
qplot(disp,mpg,mtcars)
qplot(disp,mpg,data= mtcars)
# Exercicio 8 - Considere a matriz abaixo.
# Crie um bar plot que represente os dados em barras individuais.
mat1 <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
mat1
ggplot(mat1) + barplot()
mat1 <- data.frame(mat1)
ggplot(mat1) + barplot()
ggplot(mat1) + barplot.default()
ggplot(mat1) + barplot.default(height = 100)
ggplot(mat1) + barplot(height = 100)
ggplot(mat1)
# Gerando massa de dados
data$rigth = cumsum(mat1)
# Exercício 9 - Qual o erro do código abaixo?
data(diamonds)
ggplot(data = diamonds, aes(x = price, group = fill, fill = cut)) +
geom_density(adjust = 1.5)
View(diamonds)
View(diamonds)
ggplot(data = diamonds, aes(x = price, group = cut,)) +
geom_density(adjust = 1.5)
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_barplot() +
labs(fill = "cyl")
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_barplot() +
labs(fill = "cyl")
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_col() +
labs(fill = "cyl")
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_ +
labs(fill = "cyl")
# Exercício 10 - Qual o erro do código abaixo?
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
